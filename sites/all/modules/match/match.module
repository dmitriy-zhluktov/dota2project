<?php
/**
 * Implements hook_block_info().
 */

 function match_block_info() {
	$blocks[0] = array(
		'info' => t('Планируемые матчи'),
	);
	$blocks[1] = array(
		'info' => t('Активные матчи'),
	);
	$blocks[2] = array(
		'info' => t('Завершенные матчи'),
	);
	$blocks[3] = array(
		'info' => t('Дополнительные данные'),
	);
	$blocks[4] = array(
		'info' => t('Создать матч'),
	);	
	return $blocks;
}

function match_block_view($delta='') {
	$block = array();
	switch($delta) {
		case 0:
			$block['subject'] = t('Planned matches');
			$block['content'] = match_planned_block_markup();
			break;
		case 1:
			$block['subject'] = t('Active matches');
			$block['content'] = match_active_block_markup();
			break;
		case 2:
			$block['subject'] = t('Finished matches');
			$block['content'] = match_finished_block_markup();
			break;
		case 3:
			module_load_include('inc', 'match', 'node/node.blocks');
			$block['subject'] = t('');
			$block['content'] = match_get_node_data();
			break;
		case 4:
			module_load_include('inc', 'match', 'node/node.blocks');
			$block['subject'] = t('Quick start');
			$block['content'] = match_create_node();		
			break;
	}
	
	return $block;
}

function match_planned_block_markup() {
	/*global $user;
	
	$steam = db_select('hybridauth_identity', 'h')
			->fields('h', array('data'))
			->condition('h.uid', $user->uid)
			->condition('h.provider', 'Steam')
			->execute()
			->fetchObject();

	if (isset($steam) && $steam) {
		$profile = unserialize($steam->data);

		$steamId = explode('/', $profile['identifier']);
		$steamId = end($steamId);
		$nickname = explode('/', rtrim($profile['profileURL'], '/'));
		$nickname = end($nickname);
		
	}*/
	//krumo($steamId, $nickname);
	
	$perpage = 10;
	$rows = array();

	$query = db_select('node', 'n')
		->fields('n', array('nid', 'uid'))
		->fields('u', array('name'))
		->fields('m', array('field_mod_value'))
		->fields('l', array('field_last_value'))
		->fields('f', array('field_free_place_value'))
		->fields('p', array('field_need_player_value'))
		->fields('d', array('field_date_value'))
		->fields('c', array('field_profi_command_value'));
	$query->leftJoin('field_data_field_state','s', 'n.nid=s.entity_id');
	$query->leftJoin('users','u', 'n.uid=u.uid');
	$query->leftJoin('field_data_field_mod','m', 'n.nid=m.entity_id');
	$query->leftJoin('field_data_field_last','l', 'n.nid=l.entity_id');
	$query->leftJoin('field_data_field_free_place','f', 'n.nid=f.entity_id');
	$query->leftJoin('field_data_field_need_player','p', 'n.nid=p.entity_id');
	$query->leftJoin('field_data_field_date','d', 'n.nid=d.entity_id');
	$query->leftJoin('field_data_field_profi_command','c', 'n.nid=c.entity_id');

	$query->condition('s.field_state_value', 0);
	$query = $query->extend('PagerDefault')->limit($perpage);

	$result = $query->execute();

	$output = '';
	while($row = $result->fetchObject())
	{
		$addClass = ($row->field_need_player_value == 1)? 'we-need-a-hero': false;
        $leftHero = '';
        $rightHero = '';
        if($addClass) {
            $leftImage = theme('image', array(
                'path' => drupal_get_path('theme', 'pwp').'/images/hero-left.GIF',
                'alt' => t('We need a hero!'),
                'title' => t('We need a hero!'),
                'width' => 60,
                'height' => 9
            ));
            $rightImage = theme('image', array(
                'path' => drupal_get_path('theme', 'pwp').'/images/hero-right.GIF',
                'alt' => t('We need a hero!'),
                'title' => t('We need a hero!'),
                'width' => 60,
                'height' => 9
            ));
            $leftHero = '<span class="hero-span hero-left">'.$leftImage.'</span>';
            $rightHero = '<span class="hero-span hero-right">'.$rightImage.'</span>';
        }
        $yesImage = theme('image', array(
            'path' => drupal_get_path('theme', 'pwp').'/images/checked.png',
            'alt' => t('Last match'),
            'title' => t('Last match'),
            'width' => 24,
            'height' => 24
        ));
        $noImage = theme('image', array(
            'path' => drupal_get_path('theme', 'pwp').'/images/unchecked.png',
            'alt' => t('Not last match'),
            'title' => t('Not last match'),
            'width' => 24,
            'height' => 24
        ));
		$last = ($row->field_last_value == 1)? '<span class="yesno">'.$yesImage.'</span>': '<span class="yesno">'.$noImage.'</span>';
		
		/*$in_game = false;
		if (isset($steamId)) {
			$in_game = db_select('players', 'p')->fields('p', array('id'))->condition('team_id', $row->field_profi_command_value)->condition('steam_id', $steamId)->execute()->fetchObject();
		}
		
		$ticket = ($row->field_free_place_value >= 1 && isset($steamId) && !$in_game)? match_call_ticket_form($row->nid, $steamId, $nickname): '';
		*/

        $rows[] = array(
            'data' => array(
                $leftHero.l(t('Match №'.$row->nid), 'match/'.$row->nid),
                match_get_planned_timing(strtotime($row->field_date_value), $row->uid),
                $row->field_mod_value,
                l($row->name, 'user/'.$row->uid, array('attributes' => array('class' => array('pro-user')))),
                $row->field_free_place_value,
                $last.$rightHero
            ),
            'class' => array($addClass)
        );
	}
    $header = array(
        t('ID'),
        t('Time to start'),
        t('Mod'),
        t('PRO-player'),
        t('Free slots'),
        t('Last match')
    );

    if(count($rows)>0) {
        $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('planned-matches'))));
        $output .= theme('pager', array('element' => 1, 'tags' => array('0' => t('в нач.'), '1' => t('пред.'), '2' => t('t2'), '3' => t('след.'), '4' => t('посл.'))));    // Получаем html код таблицы
    } else {
        $output = '<div class="center">'.t('No planned matches at this moment').'</div>';
    }
	return $output;		
}

function match_active_block_markup() {
	$perpage = 10;

	$query = db_select('node', 'n')
		->fields('n', array('nid', 'uid'))
		->fields('u', array('name'))
		->fields('m', array('field_mod_value'))
		->fields('v', array('field_vod_value'))
		->fields('st', array('field_started_value'))
		->fields('p', array('field_profi_command_value'));

	$query->leftJoin('field_data_field_state','s', 'n.nid=s.entity_id');
	$query->leftJoin('users','u', 'n.uid=u.uid');
	$query->leftJoin('field_data_field_mod','m', 'n.nid=m.entity_id');
	$query->leftJoin('field_data_field_vod','v', 'n.nid=v.entity_id');
	$query->leftJoin('field_data_field_started','st', 'n.nid=st.entity_id');
	$query->leftJoin('field_data_field_profi_command','p', 'n.nid=p.entity_id');


	$query->condition('s.field_state_value', 1);
	$query = $query->extend('PagerDefault')->limit($perpage);

	$result = $query->execute();

	$output = '';
	$i = 0;
	$rows = $result->fetchAll();
	
	/* creating an array of active matches twitch viewers*/
	$viewers = array();
	foreach ($rows as $key => $row) {
        if(isset($row->field_vod_value)) {
            $stream = parse_url($row->field_vod_value, PHP_URL_PATH);
            $res = drupal_http_request('https://api.twitch.tv/kraken/streams'.$stream);

            if ($res->code == 200 && $res->status_message == 'OK' && json_decode($res->data)->stream !== null)
                $viewers[] = array('id' => $key, 'views' => json_decode($res->data)->stream->viewers);
            else
                $viewers[] = array('id' => $key, 'views' => 0);
        } else {
            $viewers[] = array('id' => $key, 'views' => 0);
        }
	}
	/* sort criteria*/
	foreach ($viewers as $viewer) {
		$sortByViewers[] = $viewer['views'];
	}
	/* sorting*/
    if(isset($sortByViewers) && $sortByViewers != null) {
	    array_multisort($sortByViewers, SORT_DESC, $viewers);
        $table = '<table class="active-matches sticky-enabled tableheader-processed sticky-table">
                <thead>
                    <tr>
                        <th>'.t('ID').'</th>
                        <th>'.t('Mod').'</th>
                        <th>'.t('Players').'</th>
                        <th>'.t('Timing').'</th>
                    </tr>
                </thead>
                <tbody>';
        foreach($viewers as $view) {
            $addClass = '';
            if ($i == 0)
                $addClass .= 'best-match';
            if($i%2 == 0) {
                $addClass .= ' odd';
            } else {
                $addClass .= ' even';
            }
            $table .= '<tr class="'.$addClass.'">
                        <td class="row-id">'.l(t('Match №').$rows[$view['id']]->nid, 'match/'.$rows[$view['id']]->nid).'</td>
                        <td class="row-mod">'.$rows[$view['id']]->field_mod_value.'</td>
                        <td class="row-players">'.match_get_players_html($rows[$view['id']]->field_profi_command_value, $rows[$view['id']]->uid, $rows[$view['id']]->name).'</td>
                        <td class="row-timing">'.match_get_timing($rows[$view['id']]->field_started_value).'</td>
                        </tr>
                        <tr class="'.$addClass.'">
                        <td class="row-twitch" colspan="4"><div class="twitch-wrap" id="widget-'.$rows[$view['id']]->nid.'"><div class="twitch-slider" open="'.$rows[$view['id']]->nid.'"></div><div class="widget">'.match_get_twitch_html($rows[$view['id']]->field_vod_value).'</div></div></td>
                        </tr>';
            if($i < (count($viewers) - 1)) {
                $table .= '<tr class="margin-30" />';
            }

            /*$body[] = array(
                'data' => array(
                    array( 'data' => l(t('Match №').$rows[$view['id']]->nid, 'match/'.$rows[$view['id']]->nid), 'class' => 'row-id'),
                    array( 'data' => $rows[$view['id']]->field_mod_value, 'class' => 'row-mod'),
                    array( 'data' => match_get_players_html($rows[$view['id']]->field_profi_command_value, $rows[$view['id']]->uid, $rows[$view['id']]->name).match_get_twitch_html($rows[$view['id']]->field_vod_value), 'class' => 'row-players'),
                    array( 'data' => match_get_timing($rows[$view['id']]->field_started_value), 'class' => 'row-timing'),
                ),
                'class' => array($addClass)
            );*/
            $i++;
        }
        $table .= '</tbody></table>';
        /*$header = array(
            'ID',
            t('Mod'),
            t('Players'),
            t('Timing'),
        );*/
        //$output .= theme('table', array('header' => $header, 'rows' => $body, 'attributes' => array('class' => array('active-matches'))));
        $output .= $table;
	    $output .= theme('pager', array('element' => 2, 'tags' => array('0' => t('first'), '1' => t('prev.'), '2' => t('...'), '3' => t('next'), '4' => t('last'))));    // Получаем html код таблицы
    } else {
        $output .= '<div class="center" id="no-active">'.t('No active matches at this moment').'</div>';
    }
	return $output;		
}


function match_finished_block_markup() {
	$perpage = 10;
	$rows = array();
	
	$query = db_select('node', 'n')
		->fields('n', array('nid', 'uid'))
		->fields('u', array('name'))
		->fields('v', array('field_vod_value'))
		->fields('m', array('field_mod_value'))
		->fields('d', array('field_started_value'))
		->fields('dur', array('field_duration_value'))
		->fields('p', array('field_profi_command_value'))
		->fields('ri', array('field_rival_command_value'))
		->fields('r', array('field_rating_value'))
		->fields('res', array('field_result_value'));
	$query->leftJoin('field_data_field_state','s', 'n.nid=s.entity_id');
	$query->leftJoin('users','u', 'n.uid=u.uid');
	$query->leftJoin('field_data_field_vod','v', 'n.nid=v.entity_id');
	$query->leftJoin('field_data_field_mod','m', 'n.nid=m.entity_id');
	$query->leftJoin('field_data_field_started','d', 'n.nid=d.entity_id');
	$query->leftJoin('field_data_field_duration','dur', 'n.nid=dur.entity_id');
	$query->leftJoin('field_data_field_profi_command','p', 'n.nid=p.entity_id');
	$query->leftJoin('field_data_field_rival_command','ri', 'n.nid=ri.entity_id');
	$query->leftJoin('field_data_field_rating','r', 'n.nid=r.entity_id');
	$query->leftJoin('field_data_field_result','res', 'n.nid=res.entity_id');	

	$query->condition('s.field_state_value', 2);
	$query = $query->extend('PagerDefault')->limit($perpage);

	$result = $query->execute();
	
	$output = '';
    $header = array(
        array(
            'data' => t('ID'),
            'class' => array('id')
        ),
        array(
            'data' => t('Timing'),
            'class' => array('time')
        ),
        array(
            'data' => t('Date'),
            'class' => array('date')
        ),
        array(
            'data' => t('Mod'),
            'class' => array('mod')
        ),
        array(
            'data' => t('Rating'),
            'class' => array('rating')
        ),
        array(
            'data' => t('The Radiant'),
            'class' => array('teams radiant')
        ),
        array(
            'data' => t('Result'),
            'class' => array('results')
        ),
        array(
            'data' => t('The Dire'),
            'class' => array('teams dire')
        )
    );

	while($row = $result->fetchObject()) {

        $players = db_select('players', 'p')
            ->fields('p', array('nickname', 'uid', 'side'))
            ->condition(db_or()->condition('team_id', $row->field_profi_command_value)->condition('team_id', $row->field_rival_command_value))
            ->condition('uid', $row->uid, '!=')
            ->execute();
        $radiant = array();
        $dire = array();

        $proSide = db_select('players', 'p')
            ->fields('p', array('side'))
            ->condition('uid', $row->uid)
            ->condition('team_id', $row->field_profi_command_value)
            ->execute()
            ->fetchObject()
            ->side;
        if($proSide == 1){
            $radiant[] = l($row->name, 'user/'.$row->uid, array('attributes' => array('class' => array('pro-user'))));
        } else {
            $dire[] = l($row->name, 'user/'.$row->uid, array('attributes' => array('class' => array('pro-user')))).'
                <a href="#" class="more-info more-info-'.$row->nid.'" row="'.$row->nid.'">'.t('Show more').'<span class="float-right">&#9660;</span></a>
                <a href="#" class="less-info less-info-'.$row->nid.' hidden" row="'.$row->nid.'">'.t('Hide').'<span class="float-right">&#9650;</span></a>';
        }
        $k = 0;
        while($player = $players->fetchObject()) {

            if($player->side == 1) {
                if($player->side == $proSide) {
                    $radiant[] = l($player->nickname, 'user/'.$player->uid, array('attributes' => array('class' => array('regular-user'))));
                } else {
                    $radiant[] = '<a href="#" class="regular-user">'.$player->nickname.'</a>';
                }
            } else {
                if($player->side == $proSide) {
                    $dire[] = l($player->nickname, 'user/'.$player->uid, array('attributes' => array('class' => array('regular-user'))));
                } else {
                    if($k == 0) {
                        $dire[] = '<a href="#" class="regular-user">'.$player->nickname.'</a>
                            <a href="#" class="more-info more-info-'.$row->nid.'" row="'.$row->nid.'">'.t('Show more').'<span class="float-right">&#9660;</span></a>
                            <a href="#" class="less-info less-info-'.$row->nid.' hidden" row="'.$row->nid.'">'.t('Hide').'<span class="float-right">&#9650;</span></a>';
                    } else {
                        $dire[] = '<a href="#" class="regular-user">'.$player->nickname.'</a>';
                    }
                }
            }
            $k++;
        }
        if($row->field_vod_value) {
            $vod = '<div class="vod-'.$row->nid.' hidden"><a class="check-vod" href="'.$row->field_vod_value.'" target="_blank" alt="'.t('Check the VOD').'" title="'.t('Check the VOD').'">'.t('Check the VOD').'</a></div>';
        } else {
            $vod = '';
        }
        $rows[] = array(
            'data' => array(
                array(
                    'data' => l($row->nid, 'match/'.$row->nid, array('attributes' => array('title' => t('View match info')))),
                    'class' => array('id')
                ),
                array(
                    'data' => $row->field_duration_value,
                    'class' => array('time')
                ),
                array(
                    'data' => date('m.d.Y', $row->field_started_value),
                    'class' => array('date')
                ),
                array(
                    'data' => $row->field_mod_value,
                    'class' => array('mod')
                ),
                array(
                    'data' => '<span class="stars">'.$row->field_rating_value.'</span>',
                    'class' => array('rating')
                ),
                array(
                    'data' => theme('item_list', array('items' => $radiant, 'title' => '', 'type' => 'ul', 'attributes' => array('class' => 'players-list'))),
                    'class' => array('teams')
                ),
                array(
                    'data' => match_get_winner_html($row->field_result_value).$vod,
                    'class' => array('results')
                ),
                array(
                    'data' => theme('item_list', array('items' => $dire, 'title' => '', 'type' => 'ul', 'attributes' => array('class' => 'players-list'))),
                    'class' => array('teams')
                )
            ),
            'class' => array('row-'.$row->nid)
        );
	}
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('finished-matches'))));
	$output .= theme('pager', array('element' => 3, 'tags' => array('0' => t('в нач.'), '1' => t('пред.'), '2' => t('t2'), '3' => t('след.'), '4' => t('посл.'))));    // Получаем html код таблицы
    if(count($rows) == 0)
        $output = '<div class="center">'.t('No finished matches at this moment').'</div>';

	return $output;
}

function match_get_twitch_html ($vod) {
	if(preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $vod)) {
		$stream = substr(parse_url($vod, PHP_URL_PATH), 1);
		$twitch = '<object type="application/x-shockwave-flash" height="378" width="620" id="live_embed_player_flash'.$stream.'" data="http://www.twitch.tv/widgets/live_embed_player.swf?channel='.$stream.'" bgcolor="#000000"><param name="allowFullScreen" value="true" /><param name="allowScriptAccess" value="always" /><param name="allowNetworking" value="all" /><param name="movie" value="http://www.twitch.tv/widgets/live_embed_player.swf" /><param name="flashvars" value="hostname=www.twitch.tv&channel='.$stream.'&auto_play=false&start_volume=25" /></object>';
	} else	{
	  $twitch = '';
	}	
	return $twitch;
}

function match_get_players_html ($team, $proId, $proName) {
	$query = db_select('players', 'p')
		->fields('p', array('nickname', 'uid'));
		
	$query->condition('p.team_id', $team);
	$query->condition('p.uid', $proId, '!=');
	$result = $query->execute();
	$i = 0;
	
	$title = '';
	$type = 'ul';
	$attributes = array(
		'class' => 'players-list'
	);
    $items[] = array(
        'data' => l($proName, 'user/'.$proId, array('attributes' => array('class' => array('pro-user')))),
        'class' => array(t('players-list-item')),
    );
	while($row = $result->fetchObject()) {
		$items[] = array(
			'data' => l($row->nickname, 'user/'.$row->uid, array('attributes' => array('class' => array('regular-user')))),
			'class' => array(t('players-list-item')),
		);
	}
	$html = theme('item_list', array('items' => $items, 'title' => $title, 'type' => $type, 'attributes' => $attributes));
	return $html;
}

function match_get_timing($timestamp) {
	$start = new DateTime('@'.$timestamp);
	$now = new DateTime('@'.strtotime('now'));
	$interval = $now->diff($start);

	$hours = $interval->format('%h');
	$minutes = $interval->format('%i');
	$seconds = $interval->format('%s');
	
	if ($interval->i < 1)
		$out = t($seconds.' sec');
	elseif ($interval->h < 1 && $interval->i >= 1)
		$out = t($minutes.' min '.$seconds. ' sec');
	else
		$out = t($hours.' hours '.$minutes.' min '.$seconds. ' sec');
	return $out;
}

function match_get_planned_timing($timestamp, $uid) {
    if($timestamp-strtotime('now') < 0) {
        return t('Right now!');
    }
	$start = new DateTime('@'.$timestamp);
	$now = new DateTime('@'.strtotime('now'));
	$interval = $start->diff($now);

	$hours = $interval->format('%h');
	$minutes = $interval->format('%i');
	$seconds = $interval->format('%s');
	
	/*$query = db_select('node', 'n')
		->fields('n', array('nid'));
	$query->leftJoin('field_data_field_state','s', 'n.nid=s.entity_id');
	$query->condition('s.field_state_value', 1)
		->condition('n.uid', $uid)
		->orderBy('n.nid', 'DESC');
	$res = $query->execute();
	$result = $res->fetchObject();*/
    $result = false;
	if (isset($result) && $result && $result->nid)
		$out = t('After !match match', array('!match' => '<a href="'.url('node/'.$result->nid, array('absolute' => true)).'">this</a>'));
	else {
		if ($interval->i < 1)
			$out = t($seconds.' sec');
		elseif ($interval->h < 1 && $interval->i >= 1)
			$out = t($minutes.' min '.$seconds. ' sec');
		else
			$out = t($hours.' hours '.$minutes.' min '.$seconds. ' sec');
	}
	return $out;
}

function match_get_winner_html($winner) {
	if($winner == 1) {
        $html = '<div class="winner"><table class="winner"><tr><td class="radiant">1</td><td>:</td><td>0</td></tr></table></div>';
    } else {
        $html = '<div class="winner"><table class="winner"><tr><td>0</td><td>:</td><td class="dire">1</td></tr></table></div>';
    }

	return $html;
}


function match_call_ticket_form($nid, $steam, $nick) {
        $args = array(
            'nid' => $nid,
            'steam' => $steam,
            'nick' => $nick,
        );
	$out = '';
	$form =  drupal_get_form('match_get_ticket_form', $args);
	$out .= drupal_render($form);
	return $out;
}
function match_get_ticket_form($form, &$form_state, $args) {

	$form['node'] = array(
		'#type' => 'hidden',
		'#default_value' => $args['nid'],
	);
	$form['steam_id'] = array(
		'#type' => 'hidden',
		'#default_value' => $args['steam'],
	);
	$form['nickname'] = array(
		'#type' => 'hidden',
		'#default_value' => $args['nick'],
	);	
	
	$form['buy'] = array(
		'#type' => 'actions',
		'submit' => array(
			'#type' => 'submit',
			'#value' => t('Buy a ticket'),
		),
	);
	
	$form['#submit'] = array(
		'0' => 'match_get_ticket_form_submit',
	);	
	
	return $form;
}

function match_get_ticket_form_submit($form, &$form_state) {
	$node = node_load($form_state['values']['node']);
	if ($node->field_free_place[$node->language][0]['value'] < 1)
		drupal_set_message(t('No more free places on this match'), 'error');
	else {
		global $user;

        if(uniteller_get_money($user) < variable_get('uniteller_price')) {
            drupal_set_message(t('You have not enough PCOINS. You can update your wallet <a href="@href">here</a>',  array('@href' => url('uniteller/buy/'))), 'error');
        } else {
            $command = $node->field_profi_command[$node->language][0]['value'];
            $steam_id = $form_state['values']['steam_id'];
            $nickname = $form_state['values']['nickname'];
            db_insert('players')->fields(array('uid' => $user->uid, 'team_id' => $command, 'steam_id' => "$steam_id", 'nickname' => "$nickname",))->execute();
            $node->field_free_place[$node->language][0]['value']--;
            node_save($node);
            uniteller_update_wallet_amount($user, variable_get('uniteller_price'), false);
            drupal_set_message(t('Thanks for register'));
        }
	}
}