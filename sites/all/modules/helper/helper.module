<?php
define("API_KEY", "6F38C138960AF16B52F57DC7E955DE40");

function helper_node_insert($node) {
    if($node->type == 'news') {
        $path = array (
            'source' => 'node/'.$node->nid,
            'alias' => 'news/'.$node->nid,
        );
        path_save($path);
    } elseif($node->type == 'match') {
        $path = array (
            'source' => 'node/'.$node->nid,
            'alias' => 'match/'.$node->nid,
        );
        path_save($path);
        //$node->title = $node->title.' '.$node->nid;
        //node_save($node);
    }
}
/**
 * Implements hook_block_info().
 */

function helper_block_info() {
    $blocks[0] = array(
        'info' => t('Последние новости'),
    );
    $blocks[1] = array(
        'info' => t('Картинка для новости'),
    );

    return $blocks;
}

function helper_block_view($delta='') {
    $block = array();
    switch($delta) {
        case 0:
            $block['subject'] = t('');
            $block['content'] = helper_get_last_news(4, 650, 251);
            break;
        case 1:
            $block['subject'] = t('');
            $block['content'] = helper_news_image();
            break;
    }

    return $block;
}

function helper_get_last_news($limit, $width, $height) {
    $query = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', 'news','=')
        ->condition('status', 0,'>')
        ->orderBy('created', 'DESC')
        ->range(0, $limit);
    $result = $query->execute();
    $html = '<table class="no-style"><tr><td><div id="slider">';
    $sidebar = '<td><ul id="pagination">';
    $first = true;
    $showImage = 0;
    while ($nid = $result->fetchField()) {
        $node = node_load($nid);
        $attributes = array(
            'class' => 'slider-image',
            'nav-id' => $nid
        );
        $image = theme('image', array(
            'path' => file_create_url($node->field_image[LANGUAGE_NONE][0]['uri']),
            'alt' => t($node->title),
            'title' => t($node->title),
            'width' => $width,
            'height' => $height,
            'attributes' => $attributes,
        ));
        $html .= $image;
        if($first) {
            $sidebar .= '<li class="item active first" show-image="'.$showImage.'" id="nav-index-'.$nid.'"><div class="pagination-arrow"></div>'.l(t($node->title), 'news/'.$nid).'</li>';
            $first = false;
        } else {
            $sidebar .= '<li class="item" show-image="'.$showImage.'" id="nav-index-'.$nid.'"><div class="pagination-arrow hidden"></div>'.l(t($node->title), 'news/'.$nid).'</li>';
        }
        $showImage++;
        //krumo($node);
    }
    $sidebar .= '</ul></td>';
    $html .= '</div></td>';
    $html .= $sidebar;
    $html .= '<div class="clear"></div></tr></table>';

    drupal_add_css(drupal_get_path('module', 'helper').'/css/slider.css');
    drupal_add_js(drupal_get_path('module', 'helper').'/js/flux.js');
    drupal_add_js(drupal_get_path('module', 'helper').'/js/helper.js');

    return $html;
}

function helper_news_image() {
    $node = menu_get_object();
    $attributes = array(
        'class' => 'image'
    );
    $image = theme('image', array(
        'path' => file_create_url($node->field_image[LANGUAGE_NONE][0]['uri']),
        'alt' => t($node->title),
        'title' => t($node->title),
        'width' => 988,
        'height' => 253,
        'attributes' => $attributes,
    ));

    return '<div class="news-image">'.$image.'</div>';
}

function helper_menu() {
    $items = array(
        /*'get-heroes' => array(
            'page callback' => 'helper_tttest',
            'page arguments' => array(1),
            'access callback' => TRUE,
            'type' => MENU_CALLBACK
        ),*/
        'pro-list' => array(
            'title' => t('PRO-players'),
            'page callback' => 'helper_get_pro_list',
            'access callback' => TRUE,
            'menu_name' => 'main-menu',
            'file' => 'inc/pro.list.inc',
            //'options' => array('attributes' => array('class' => array('pro-list'))),
        ),
        'my-matches' => array(
            'title' => t('My matches'),
            'page callback' => 'helper_get_matches_list',
            'access callback' => 'user_is_logged_in',
            'menu_name' => 'menu-helper-menu',
            'file' => 'inc/matches.list.inc',
        )
    );

    return $items;
}

function helper_get_heroes($api_key) {
    $url = 'http://api.steampowered.com/IEconDOTA2_570/GetHeroes/v1?key='.$api_key;
    $data = helper_curl($url);
    if($data != null) {
        $heroes = $data->result->heroes;
        $values = array();
        foreach ($heroes as $hero) {
            $id = $hero->id;
            $name = str_replace("npc_dota_hero_", "", $hero->name);

            $values[] = array(
                'id' => $id,
                'name' => $name,//ucwords(str_replace("_", " ", $name)),
                'image' => ''
            );
            helper_get_hero_images($name);
        }
        $query = db_insert('heroes')->fields(array('id', 'name', 'image'));
        foreach ($values as $value) {
            $query->values($value);
        }
        $query->execute();
        echo 'finished';

    } else {
        echo t('No data recieved');
    }

    $xml = json_decode(file_get_contents(drupal_get_path('module','helper').'/items.json'), true);
    $data = array();
    foreach ($xml['result']['items'] as $item) {
        $data[] = array(
            'id' => $item['id'],
            'name' => ucwords(str_replace("_", " ", $item['name'])),
            'image' => ''
        );
        //helper_get_hero_images($item['name']);
    }
    $query = db_insert('artifacts')->fields(array('id', 'name', 'image'));
    foreach ($data as $value) {
        $query->values($value);
    }
    $query->execute();
}

function helper_curl($url) {
    $curl = curl_init();

    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER,true);
    curl_setopt($curl, CURLOPT_POST, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

    $out = curl_exec($curl);
    curl_close($curl);

    return json_decode($out);
}

function helper_get_hero_images($name) {
    $url = 'http://media.steampowered.com/apps/dota2/images/items/'.$name.'_lg.png';
    helper_grab_image($url, file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath().'/artifacts/'.$name.'.png');
}

function helper_get_match_statistics($match_id) {
    //$match_id = 27110133;
    $url = 'https://api.steampowered.com/IDOTA2Match_570/GetMatchDetails/V001/?match_id='.$match_id.'&key='.API_KEY.'&format=json';
    $result = helper_curl($url);

    //krumo($result);
    return $result;
}

function helper_grab_image($url,$saveto) {
    $in = fopen($url, "rb");
    $out = fopen($saveto, "wb");
    while ($chunk = fread($in,8192))
    {
        fwrite($out, $chunk, 8192);
    }
    fclose($in);
    fclose($out);
}

function helper_get_steam_id($uid) {
    $steam = db_select('hybridauth_identity', 'h')
        ->fields('h', array('data'))
        ->condition('h.uid', $uid)
        ->condition('h.provider', 'Steam')
        ->execute()
        ->fetchObject();

    $steam_id = 0;
    if (isset($steam) && $steam) {
        $profile = unserialize($steam->data);
        $steam_id = explode('/', $profile['identifier']);
        $steam_id = end($steam_id);
    }
    return $steam_id;
}

function helper_convert_id($id) {
    if (strlen($id) === 17) {
        $converted = substr($id, 3) - 61197960265728;
    } else {
        $converted = '765'.($id + 61197960265728);
    }

    return (string) $converted;
}

function helper_get_nickname_by_steam_id($id) {
    if($id == 4294967295) {
        return 'Anon';
    }
    $steamId = helper_convert_id($id);
    $url = 'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key='.API_KEY.'&steamids='.$steamId;
    $result = helper_curl($url);
    //krumo($result);
    if(count($result->response->players) > 0) {
        return $result->response->players[0]->personaname;
    } else {
        return false;
    }
}

function helper_menu_alter(&$items) {
    //krumo($items);
    if(isset($items['messages'])) {
        $items['messages']['menu_name'] = 'menu-helper-menu';
        //$items['messages']['title callback'] = 'helper_privatemessage_title_callback';
        //krumo($items);exit;
    }
}

function helper_privatemessage_menu_title() {
    $count = privatemsg_unread_count();
    $icon = theme('image', array(
        'path' => drupal_get_path('theme', 'pwp').'/images/message.png',
        'alt' => t('Messages'),
        'title' => t('Messages'),
        'width' => 20,
        'height' => 11
    ));
    if ($count > 0) {
        return '<span class="prvtmsg-icon">'.$icon.'<span class="prvtmsg-count">'.$count.'</span></span>';
    }
    return '<span class="prvtmsg-icon">'.$icon.'</span>';
}

function helper_node_delete($node) {
    if($node->type == 'match') {
        $db_or = db_or();
        $db_or->condition('team_id', $node->field_profi_command[$node->language][0]['value']);
        $db_or->condition('team_id', $node->field_rival_command[$node->language][0]['value']);
        db_delete('players')
            ->condition($db_or)
            ->execute();
        db_delete('teams')
            ->condition('match_id', $node->nid)
            ->execute();
        db_delete('match_votes')
            ->condition('match_id', $node->nid)
            ->execute();
        db_delete('kick_history')
            ->condition('match_id', $node->nid)
            ->execute();
    }
}