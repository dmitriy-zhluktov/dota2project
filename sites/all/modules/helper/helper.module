<?php
define("API_KEY", "6F38C138960AF16B52F57DC7E955DE40");

function helper_node_insert($node) {
    if($node->type == 'news') {
        $path = array (
            'source' => 'node/'.$node->nid,
            'alias' => 'news/'.$node->nid,
        );
        path_save($path);
    } elseif($node->type == 'match') {
        $path = array (
            'source' => 'node/'.$node->nid,
            'alias' => 'match/'.$node->nid,
        );
        path_save($path);
    }
}
/**
 * Implements hook_block_info().
 */

function helper_block_info() {
    $blocks[0] = array(
        'info' => t('Последние новости'),
    );
    $blocks[1] = array(
        'info' => t('Картинка для новости'),
    );
    $blocks[2] = array(
        'info' => t('Картинка uniteller'),
    );

    return $blocks;
}

function helper_block_view($delta='') {
    $block = array();
    switch($delta) {
        case 0:
            $block['subject'] = t('');
            $block['content'] = helper_get_last_news(4, 650, 251);
            break;
        case 1:
            $block['subject'] = t('');
            $block['content'] = helper_news_image();
            break;
        case 2:
            $block['subject'] = t('');
            $block['content'] = helper_uniteller_buy_image();
            break;
    }

    return $block;
}

function helper_get_last_news($limit, $width, $height) {
    $query = db_select('node', 'n')
        ->fields('n', array('nid'))
        ->condition('type', 'news','=')
        ->condition('status', 0,'>')
        ->orderBy('created', 'DESC')
        ->range(0, $limit);
    $result = $query->execute();
    $html = '<table class="no-style"><tr><td><div id="slider">';
    $sidebar = '<td><ul id="pagination">';
    $first = true;
    $showImage = 0;
    while ($nid = $result->fetchField()) {
        $node = node_load($nid);
        $attributes = array(
            'class' => 'slider-image',
            'nav-id' => $nid
        );
        $image = theme('image', array(
            'path' => file_create_url($node->field_image[LANGUAGE_NONE][0]['uri']),
            'alt' => t($node->title),
            'title' => t($node->title),
            'width' => $width,
            'height' => $height,
            'attributes' => $attributes,
        ));
        $html .= $image;
        if($first) {
            $sidebar .= '<li class="item active first" show-image="'.$showImage.'" id="nav-index-'.$nid.'"><div class="pagination-arrow"></div>'.l(t($node->title), 'news/'.$nid).'</li>';
            $first = false;
        } else {
            $sidebar .= '<li class="item" show-image="'.$showImage.'" id="nav-index-'.$nid.'"><div class="pagination-arrow hidden"></div>'.l(t($node->title), 'news/'.$nid).'</li>';
        }
        $showImage++;
    }
    $sidebar .= '</ul></td>';
    $html .= '</div></td>';
    $html .= $sidebar;
    $html .= '<div class="clear"></div></tr></table>';

    drupal_add_css(drupal_get_path('module', 'helper').'/css/slider.css');
    drupal_add_js(drupal_get_path('module', 'helper').'/js/flux.js');
    drupal_add_js(drupal_get_path('module', 'helper').'/js/helper.js');

    return $html;
}

function helper_news_image() {
    $node = menu_get_object();
    $attributes = array(
        'class' => 'image'
    );
    $image = theme('image', array(
        'path' => file_create_url($node->field_image[LANGUAGE_NONE][0]['uri']),
        'alt' => t($node->title),
        'title' => t($node->title),
        'width' => 988,
        'height' => 253,
        'attributes' => $attributes,
    ));

    return '<div class="news-image">'.$image.'</div>';
}

function helper_menu() {
    $items = array(
        /*'get-heroes' => array(
            'page callback' => 'helper_tttest',
            'page arguments' => array(1),
            'access callback' => TRUE,
            'type' => MENU_CALLBACK
        ),*/
        'pro-list' => array(
            'title' => t('PRO-players'),
            'page callback' => 'helper_get_pro_list',
            'access callback' => TRUE,
            'menu_name' => 'main-menu',
            'file' => 'inc/pro.list.inc',
        ),
        'my-matches' => array(
            'title' => t('My matches'),
            'page callback' => 'helper_get_matches_list',
            'access callback' => 'user_is_logged_in',
            'menu_name' => 'menu-helper-menu',
            'file' => 'inc/matches.list.inc',
        )
    );

    return $items;
}

function helper_get_heroes($api_key) {
    $url = 'http://api.steampowered.com/IEconDOTA2_570/GetHeroes/v1?key='.$api_key;
    $data = helper_curl($url);
    if($data != null) {
        $heroes = $data->result->heroes;
        $values = array();
        foreach ($heroes as $hero) {
            $id = $hero->id;
            $name = str_replace("npc_dota_hero_", "", $hero->name);

            $values[] = array(
                'id' => $id,
                'name' => $name,
                'image' => ''
            );
            helper_get_hero_images($name);
        }
        $query = db_insert('heroes')->fields(array('id', 'name', 'image'));
        foreach ($values as $value) {
            $query->values($value);
        }
        $query->execute();
        echo 'finished';

    } else {
        echo t('No data recieved');
    }

    $xml = json_decode(file_get_contents(drupal_get_path('module','helper').'/items.json'), true);
    $data = array();
    foreach ($xml['result']['items'] as $item) {
        $data[] = array(
            'id' => $item['id'],
            'name' => ucwords(str_replace("_", " ", $item['name'])),
            'image' => ''
        );
    }
    $query = db_insert('artifacts')->fields(array('id', 'name', 'image'));
    foreach ($data as $value) {
        $query->values($value);
    }
    $query->execute();
}

function helper_curl($url) {
    $curl = curl_init();

    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER,true);
    curl_setopt($curl, CURLOPT_POST, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

    $out = curl_exec($curl);
    curl_close($curl);

    return json_decode($out);
}

function helper_get_hero_images($name) {
    $url = 'http://media.steampowered.com/apps/dota2/images/items/'.$name.'_lg.png';
    helper_grab_image($url, file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath().'/artifacts/'.$name.'.png');
}

function helper_get_match_statistics($match_id) {
    //$match_id = 27110133;
    $url = 'https://api.steampowered.com/IDOTA2Match_570/GetMatchDetails/V001/?match_id='.$match_id.'&key='.API_KEY.'&format=json';
    $result = helper_curl($url);

    return $result;
}

function helper_grab_image($url,$saveto) {
    $in = fopen($url, "rb");
    $out = fopen($saveto, "wb");
    while ($chunk = fread($in,8192))
    {
        fwrite($out, $chunk, 8192);
    }
    fclose($in);
    fclose($out);
}

function helper_get_steam_id($uid) {
    $steam = db_select('hybridauth_identity', 'h')
        ->fields('h', array('data'))
        ->condition('h.uid', $uid)
        ->condition('h.provider', 'Steam')
        ->execute()
        ->fetchObject();

    $steam_id = 0;
    if (isset($steam) && $steam) {
        $profile = unserialize($steam->data);
        $steam_id = explode('/', $profile['identifier']);
        $steam_id = end($steam_id);
    }
    return $steam_id;
}

function helper_convert_id($id) {
    if (strlen($id) === 17) {
        $converted = substr($id, 3) - 61197960265728;
    } else {
        $converted = '765'.($id + 61197960265728);
    }

    return (string) $converted;
}

function helper_get_nickname_by_steam_id($id) {
    if($id == 4294967295) {
        return 'Anon';
    }
    $steamId = helper_convert_id($id);
    $url = 'http://api.steampowered.com/ISteamUser/GetPlayerSummaries/v0002/?key='.API_KEY.'&steamids='.$steamId;
    $result = helper_curl($url);
    if(count($result->response->players) > 0) {
        return $result->response->players[0]->personaname;
    } else {
        return false;
    }
}

function helper_menu_alter(&$items) {
    if(isset($items['messages']) && $items['messages']['menu_name'] == 'user-menu') {
        $items['messages']['menu_name'] = 'menu-helper-menu';
        //$items['messages']['title callback'] = 'helper_privatemessage_title_callback';
    }
    if(isset($items['user'])) {
        $items['user']['menu_name'] = 'menu-helper-menu';
    }

    unset($items['messages/new']);
    $items['messages/new'] = array(
        'title'            => '+ Write new message',
        'page callback'    => 'drupal_get_form',
        'page arguments'   => array('privatemsg_new', 2, 3, NULL),
        'file'             => drupal_get_path('module','privatemsg').'/privatemsg.pages.inc',
        'access callback'  => 'privatemsg_user_access',
        'access arguments' => array('write privatemsg'),
        'type'             => MENU_LOCAL_TASK,
        'weight'           => 11,
        'menu_name'        => 'user-menu',
    );
}

function helper_privatemessage_menu_title() {
    $count = privatemsg_unread_count();
    $icon = theme('image', array(
        'path' => drupal_get_path('theme', 'pwp').'/images/message.png',
        'alt' => t('Messages'),
        'title' => t('Messages'),
        'width' => 20,
        'height' => 15
    ));
    if ($count > 0) {
        return '<span class="prvtmsg-icon">'.$icon.'<span class="prvtmsg-count">'.$count.'</span></span>';
    }
    return '<span class="prvtmsg-icon">'.$icon.'</span>';
}

function helper_node_delete($node) {
    if($node->type == 'match') {
        $db_or = db_or();
        $db_or->condition('team_id', $node->field_profi_command[$node->language][0]['value']);
        $db_or->condition('team_id', $node->field_rival_command[$node->language][0]['value']);
        db_delete('players')
            ->condition($db_or)
            ->execute();
        db_delete('teams')
            ->condition('match_id', $node->nid)
            ->execute();
        db_delete('match_votes')
            ->condition('match_id', $node->nid)
            ->execute();
        db_delete('kick_history')
            ->condition('match_id', $node->nid)
            ->execute();
    }
}

function helper_uniteller_buy_image() {
    $attributes = array(
        'class' => 'image'
    );
    $image = theme('image', array(
        'path' => base_path().'sites/all/themes/pwp/images/pcoins.png',
        'alt' => t('Pcoins'),
        'title' => t('Pcoins'),
        'width' => 1000,
        'height' => 135,
        'attributes' => $attributes,
    ));

    return '<div class="uniteller-image">'.$image.'</div>';
}

function helper_module_implements_alter(&$implementations, $hook) {
    if($hook == 'menu_local_tasks_alter') {
        unset($implementations['privatemsg']);
    }
    if($hook == 'user_view') {
        $group = $implementations['helper'];
        unset($implementations['helper']);
        $implementations['helper'] = $group;
    }
}

function helper_form_alter(&$form, &$form_state, $form_id) {
    switch($form_id) {
        case 'privatemsg_form_reply':
            $form['actions']['submit']['#suffix'] = '<div class="clear"></div>';
            unset($form['body']['#title']);
            break;
    }
}

function helper_user_view($account) {
    global $user;
    if($account->uid == $user->uid)
        unset($account->content['privatemsg_send_new_message']);
}

function helper_user_menu_title() {
    global $user;
    $user = user_load($user->uid);
    $ban = false;
    if(in_array('ban', $user->roles)) {
        $ban = true;
    }

    if($user->uid != 0 && !$ban) {
        $pic = file_build_uri('user-default.png');
        if(isset($user->picture) && $user->picture != NULL) {
            $pic = $user->picture->uri;
        }
        $pic = theme('image_style', array('path' => $pic, 'style_name' => 'user_top_pic'));
        $data['pic'] = $pic;
    }
    $data['ban'] = $ban;
    $data['name'] = user_is_logged_in() ? $GLOBALS['user']->name : t('User account');
    return $data;
}

function helper_my_matches_title_callback() {
    global $user;
    $type = 'match';
    $count = 0;
    $nids = array();
    if(!in_array('pro', $user->roles)) {
        $query = "SELECT t.match_id FROM {teams} AS t
          JOIN {players} AS p ON p.team_id = t.id
          WHERE p.uid = $user->uid";
        $exec = db_query($query);
        while($res = $exec->fetchAssoc()) {
            $nids[] = $res['match_id'];
        }

        if(count($nids) > 0) {
            $query = new EntityFieldQuery();
            $entities = $query->entityCondition('entity_type', 'node')
                ->entityCondition('bundle', $type)
                ->propertyCondition('nid', $nids, 'in')
                ->fieldCondition('field_state', 'value', 1)
                ->range(0, 1)
                ->execute();
            if(count($entities) > 0) {
                $nid = array_keys($entities['node']);
                $nid = $nid[0];
                $count = 1;
            }
        }
    } else {
        $query = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', $type)
            ->propertyCondition('uid', $user->uid)
            ->fieldCondition('field_state', 'value', 1)
            ->range(0, 1)
            ->execute();
        if(count($entities) > 0) {
            $nid = array_keys($entities['node']);
            $nid = $nid[0];
            $count = 1;
        }
    }
    $icon = theme('image', array(
        'path' => drupal_get_path('theme', 'pwp').'/images/match-icon.png',
        'alt' => t('My mathces'),
        'title' => t('My matches'),
        'width' => 20,
        'height' => 15
    ));
    if ($count > 0) {
        return '<span class="prvtmsg-icon mymatch-icon">'.$icon.'<span class="prvtmsg-count">'.l($count, 'match/'.$nid, array('attributes' => array('class' => array('active-match-link'), 'title' => t('To active match')))).'</span></span>';
    }
    return '<span class="prvtmsg-icon">'.$icon.'</span>';
}

function helper_user_is_online($uid) {
    $online = db_query("SELECT uid FROM {sessions} WHERE uid = :uid AND timestamp >= :time", array(':uid' => $uid, ':time' => (REQUEST_TIME - 600)))->fetchField();
    return $online;
}

function helper_picture_form($form, &$form_state) {

    $form['picture']['profile'] = array(
        '#type' => 'file',
        '#title' => t('Profile picture'),
    );

    $form['submit'] = array('#type' => 'submit','#value' => 'Submit');

    return $form;
}


function helper_picture_form_validate($form, &$form_state) {
    $file = file_save_upload('profile', array(
        'file_validate_is_image' => array(),
        'file_validate_extensions' => array('png gif jpg jpeg'),
    ));
    if ($file) {
        if ($file = file_move($file, 'public://')) {
            $form_state['values']['profile'] = $file;
        } else {
            form_set_error('profile', t('Failed to write the uploaded file the site\'s file folder.'));
        }
    } else {
        form_set_error('profile', t('No file was uploaded.'));
    }
}

function helper_picture_form_submit($form, &$form_state) {
    global $user;
    $uid = $user->uid;
    $account = user_load($uid);

    $file = $form_state['values']['profile'];
    unset($form_state['values']['profile']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);

    $edit['picture'] = $file;
    user_save($account, $edit);
}

function helper_player_win_rating($user) {
    $uid = $user->uid;
    $type = 'match';
    $nodes = array();
    $nids = array();
    $return = array(
        'total' => 0,
        'win' => 0,
        'lost' => 0,
        'percents' => '0%'
    );

    $query = "SELECT t.match_id, p.side FROM {teams} AS t
      JOIN {players} AS p ON p.team_id = t.id
      WHERE p.uid = $uid";
    $exec = db_query($query);
    while($res = $exec->fetchAssoc()) {
        $nids[] = $res['match_id'];
        $sides[$res['match_id']] = $res['side'];
    }

    if(count($nids) > 0) {
        $query = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', $type)
            ->propertyCondition('nid', $nids, 'in')
            ->fieldCondition('field_state', 'value', 2)
            ->execute();
        if(count($entities) > 0) {
            $nodes = node_load_multiple(array_keys($entities['node']));
        }
    }
    if(count($nodes) > 0) {
        foreach($nodes as $node) {
            $return['total']++;
            if($node->field_result[$node->language][0]['value'] == $sides[$node->nid]) {
                $return['win']++;
            }
        }
    }

    $return['lost'] = $return['total'] - $return['win'];
    $return['percents'] = ($return['win'] == 0)? (0).'%' : round($return['win']/$return['total']*100).'%';

    return $return;
}

function helper_player_pro_rating($user) {
    if(!in_array('pro', $user->roles)) {
        $res = db_query("SELECT AVG(rating) as rating FROM {players} WHERE uid = :uid AND rating != 0", array(':uid' => $user->uid))->fetchObject();
    } else {
        $query = new EntityFieldQuery();
        $type = 'match';
        $entities = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', $type)
            ->propertyCondition('uid', $user->uid)
            ->fieldCondition('field_state', 'value', 2)
            ->execute();
        $res = null;
        if(count($entities) > 0) {
            $res = db_query("SELECT AVG(field_rating_value) as rating FROM {field_data_field_rating} WHERE entity_id IN (:nids)", array(':nids' => implode(",", array_keys($entities['node']))))->fetchObject();
        }
    }
    return $res == null? 0 : $res->rating*20;
}

function helper_player_played_time($user) {
    $nids = array();
    $type = 'match';
    $nodes = array();
    $time = 0;
    $exec = db_query("SELECT t.match_id FROM {teams} AS t JOIN {players} AS p ON p.team_id = t.id WHERE p.uid = :uid", array(":uid" => $user->uid));
    while($res = $exec->fetchAssoc()) {
        $nids[] = $res['match_id'];
    }

    if(count($nids) > 0) {
        $query = new EntityFieldQuery();
        $entities = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', $type)
            ->propertyCondition('nid', $nids, 'in')
            ->fieldCondition('field_state', 'value', 2)
            ->execute();
        if(count($entities) > 0) {
            $nodes = node_load_multiple(array_keys($entities['node']));
        }
    }
    if(count($nodes) > 0) {
        foreach($nodes as $node) {
            $parts = explode(":", $node->field_duration[$node->language][0]['value']);
            $time += 60*$parts[0] + $parts[1];
        }
    }

    return $time;
}

function helper_pro_vods($user) {
    $res = null;
    if(in_array('pro', $user->roles)) {
        $query = new EntityFieldQuery();
        $type = 'match';
        $entities = $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', $type)
            ->propertyCondition('uid', $user->uid)
            ->fieldCondition('field_state', 'value', 2)
            ->execute();

        if(count($entities) > 0) {
            $nodes = node_load_multiple(array_keys($entities['node']));

            foreach($nodes as $node) {
                if(preg_match('/http:\/\/www\.youtube\.com\/watch\?v=[^&]+/', $node->field_vod['und'][0]['value'])) {
                    $videoId = null;
                    if(preg_match("#(?<=v=)[a-zA-Z0-9-]+(?=&)|(?<=v\/)[^&\n]+(?=\?)|(?<=v=)[^&\n]+|(?<=youtu.be/)[^&\n]+#", $node->field_vod['und'][0]['value'], $matches))
                        $videoId = $matches[0];

                    if($videoId != null)
                        $info = helper_curl("http://gdata.youtube.com/feeds/api/videos/$videoId?v=2&alt=jsonc");

                    $res[] = array(
                        'source' => 'http://www.youtube.com/embed/'.$videoId,
                        'date' => date('M d, Y', strtotime($node->field_date['und'][0]['value'])),
                        'views' => $info == null? 0 : $info->data->viewCount,
                        'title' => $info == null? t('Not found') : $info->data->title,
                        'thumb' => $info == null? '#' : $info->data->thumbnail->sqDefault
                    );
                }
            }
        }
    }
    return $res;
}