<?php
define('AUTH_TOKEN', 'authToken');
define('CRON_AUTH_TOKEN', 'cronAuthToken');
define('STATE_COMPLETE', 'completed');
/**
 * Implements hook_menu().
 */
function twocheckout_menu() {
    $items['payment/endpoint'] = array(
        'title' => 'Internal Data',
        'page callback' => 'twocheckout_endpoint',
        'access callback' => true,
        'page arguments' => array(),
        'type' => MENU_CALLBACK,
    );
    /*$items['twocheckout/test'] = array(
        'title' => 'Internal Data',
        'page callback' => 'twocheckout_test',
        'access callback' => true,
        'page arguments' => array(),
        'type' => MENU_CALLBACK,
    );*/
    $items['payment/cron'] = array(
        'title' => 'Payment Cron',
        'page callback' => 'twocheckout_cron',
        'access callback' => 'menu_access',
        'page arguments' => array(),
        'access arguments' => array('access cron'),
        'type' => MENU_CALLBACK,
    );

    $items['payment/buy'] = array(
        'title' => t('Buy'),
        'page callback' => 'twocheckout_buy_page',
        'access callback' => 'user_is_logged_in',
        'page arguments' => array(),
        'menu_name' => 'menu-helper-menu',
    );

    $items['user/%/orders'] = array(
        'title' => t('My orders'),
        'page callback' => 'twocheckout_user_orders',
        'page arguments' => array(1),
        'access callback' => 'twocheckout_view_own_orders',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
    );

    $items['user/%/checkoutfunds'] = array(
        'title' => t('Checkout funds'),
        'page callback' => 'twocheckout_user_checkoutfunds',
        'page arguments' => array(1),
        'access callback' => 'twocheckout_view_own_checkoutfunds',
        'access arguments' => array(1),
        'type' => MENU_LOCAL_TASK,
        'weight' => 5
    );

    $items['admin/config/twocheckout'] = array(
        'title' => t('Paypal'),
        'description' => t('Paypal integration'),
        'position' => 'right',
        'weight' => -20,
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('access administration pages'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );
    $items['admin/config/twocheckout/settings'] = array(
        'title' => t('Paypal settings'),
        'description' => t('Configuration for 2Checkout'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('twocheckout_admin_config_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['admin/config/twocheckout/list'] = array(
        'title' => t('Paypal orders'),
        'description' => t('List of orders'),
        'page callback' => 'twocheckout_admin_order_list',
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    $items['user/%user/edit/wallet'] = array(
        'title' => t('Wallet'),
        'page callback' => 'twocheckout_usertab',
        'page arguments' => array(1),
        'access arguments' => array('administer users'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 5,
    );

    return $items;
}

function twocheckout_buy_page() {
    $form = drupal_get_form('twocheckout_order_form');
    $html = drupal_render($form);

    drupal_add_js(
        array(
            'twocheckout' =>
                array(
                    'currency' => variable_get('twocheckout_currency'),
                ),
            'tch' =>
                array(
                    'sellerId' => variable_get('twocheckout_sellerid'),
                    'publishableKey' => variable_get('twocheckout_publishablekey'),
                    'mode' => (variable_get('twocheckout_sandbox') == 1)? 'sandbox' : 'production'
                )
        ),
        array('type' => 'setting')
    );
    return $html;
}

function twocheckout_order_form($form, &$form_state) {

    $form['qty'] = array(
        '#type' => 'textfield',
        '#title' => t('Quantity'),
        '#required' => true,
        '#element_validate' => array('element_validate_integer_positive'),
        '#field_suffix' => '<span class="recounter-text">=</span><input type="text" disabled="disabled" id="qty-recounter" /><span class="recounter-text bux">$</span>'
    );

    $form['submit'] = array(
        '#type' => 'actions',
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Checkout'),
        ),
    );

    return $form;
}


function twocheckout_order_form_submit($form, &$form_state) {
    global $user;

    $returnUrl = url('payment/endpoint', array('query' => array('success' => 'true'), 'absolute' => true));
    $cancelUrl = url('payment/endpoint', array('query' => array('cancel' => 'true'), 'absolute' => true));
    $currency = variable_get('twocheckout_realcurrency');
    $total = $form_state['values']['qty']*variable_get('twocheckout_currency');
    $qty = $form_state['values']['qty'];
    db_insert('orders')
        ->fields(array(
            'uid' => $user->uid,
            'qty' => $qty,
            'total' => $total,
            'created' => time()
        ))
        ->execute();
    $orderId = Database::getConnection()->lastInsertId();

    $sandbox = variable_get('twocheckout_sandbox');
    $authToken = twocheckout_get_auth_token();
    if(!$authToken) {
        twocheckout_order_update($orderId, null, true);
        $resultMessage['type'] = 'error';
        $resultMessage['text'] = t('Can\'t get access token. Incorrect data sent');
    } else {
        $item = new stdClass();
        $item->amount = new stdClass();
        $item->amount->currency = $currency;
        $item->amount->total = $total;
        $item->description = t('Creating a payment');

        $payer = new stdClass();
        $payer->payment_method = 'paypal';

        $intent = 'sale';
        $redirectUrls = new stdClass();
        $redirectUrls->cancel_url = $cancelUrl;
        $redirectUrls->return_url = $returnUrl;

        $data = new stdClass();
        $data->transactions = array($item);
        $data->payer = $payer;
        $data->intent = $intent;
        $data->redirect_urls = $redirectUrls;

        if($sandbox) {
            $url = "https://api.sandbox.paypal.com/v1/payments/payment";
        } else {
            $url = "https://api.paypal.com/v1/payments/payment";
        }

        $curl = curl_init();

        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER,true);
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($data));
        curl_setopt($curl, CURLOPT_HTTPHEADER, array(
                'Content-Type:application/json',
                'Authorization:'.$authToken
            )
        );
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        $out = curl_exec($curl);
        curl_close($curl);

        $response = json_decode($out);
        if($response == NULL) {
            twocheckout_order_update($orderId, null, true);
            $resultMessage['type'] = 'error';
            $resultMessage['text'] = t('Incorrect data sent');
        } else {
            $orderData = array(
                'invoiceid' => $response->id,
                'status' => $response->state,
            );
            twocheckout_order_update($orderId, $orderData);
            $redirect = false;
            foreach($response->links as $link) {
                if($link->rel == 'approval_url') {
                    $redirect = $link->href;
                }
            }
            if($redirect) {
                drupal_goto($redirect, array('external' => true));
                exit();
            } else {
                twocheckout_order_update($orderId, null, true);
                $resultMessage['type'] = 'error';
                $resultMessage['text'] = t('Approval url missed');
            }
        }
    }
    drupal_set_message($resultMessage['text'], $resultMessage['type']);
}

function twocheckout_order_update($id, $data = array(), $delete = false) {
    if(!$delete) {
        $data['modified'] = REQUEST_TIME;
        db_update('orders')->fields($data)->condition('orders.id', $id)->execute();
    } else {
        db_delete('orders')->condition('orders.id', $id)->execute();
    }
}

function twocheckout_update_wallet_amount($uid, $amount, $increase = true) {
    if($increase) {
        db_update('user_wallets')->expression('cash', 'cash + :qty', array(':qty' => $amount))->condition('user_wallets.uid', $uid)->execute();
    } else {
        db_update('user_wallets')->expression('cash', 'cash - :qty', array(':qty' => $amount))->condition('user_wallets.uid', $uid)->execute();
    }
}

function twocheckout_admin_config_form($form, &$form_state) {

    $form['twocheckout_sellerid'] = array(
        '#type' => 'textfield',
        '#title' => t('Seller ID'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_sellerid', '901269432'),
        '#size' => 100
    );
    $form['twocheckout_privatekey'] = array(
        '#type' => 'textfield',
        '#title' => t('Private key'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_privatekey', '57D0A2F4-D833-4635-81AF-9601375E94B5'),
        '#size' => 100
    );
    $form['twocheckout_publishablekey'] = array(
        '#type' => 'textfield',
        '#title' => t('Publishable Key'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_publishablekey', '3246CBED-864A-43F3-8770-D7C119418BC1'),
        '#size' => 40
    );
    $form['twocheckout_sandbox'] = array(
        '#type' => 'radios',
        '#title' => t('Режим'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_sandbox', 1),
        '#options' => array(
            1 => t('Тестовый'),
            0 => t('Нормальный')
        ),
    );

    $form['twocheckout_realcurrency'] = array(
        '#type' => 'textfield',
        '#title' => t('Валюта для покупки'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_realcurrency', 'USD'),
        '#size' => 10,
        '#description' => 'Доступные варианты: ARS, AUD, BRL, GBP, CAD, DKK, EUR, HKD, INR, ILS, JPY, MYR, MXN, NZD, NOK, PHP, RON, RUB, SGD, ZAR, SEK, CHF, TRY, AED, USD'
    );

    $form['twocheckout_currencyname'] = array(
        '#type' => 'textfield',
        '#title' => t('Название игровой валюты'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_currencyname', 'PCOINS'),
        '#size' => 10
    );

    $form['twocheckout_currency'] = array(
        '#type' => 'textfield',
        '#title' => t('Стоимость 1 игровой валюты'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_currency', 1),
        '#size' => 10
    );

    $form['twocheckout_ticketprice'] = array(
        '#type' => 'textfield',
        '#title' => t('Стоимость билета'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_ticketprice', 100),
        '#size' => 10
    );

    $form['twocheckout_outemail'] = array(
        '#type' => 'textfield',
        '#title' => t('E-mail для получения писем о выводе средств'),
        '#required' => true,
        '#default_value' => variable_get('twocheckout_outemail', 'pstemka@gmail.com'),
        '#size' => 40
    );

    return system_settings_form($form);
}

function twocheckout_admin_order_list() {
    $res = db_select('orders', 'o')
        ->fields('o')
        ->execute();
    $rows = array();
    while($row = $res->fetchAssoc()) {

        $row['created'] = date('Y-m-d H:i', $row['created']);
        $row['modified'] = date('Y-m-d H:i', $row['modified']);
        $row['transfered'] = ($row['transfered'] == 0)? t('No'): t('Yes');
        $rows[] = $row;

    }
    if(count($rows) > 0) {
        $header = array(
            t('ID'),
            t('Invoice ID'),
            t('User ID'),
            t('Quantity'),
            t('Status'),
            t('Total'),
            t('Created'),
            t('Modified'),
            t('Transfered'),
            t('Result code')
        );
        $attributes = array(
            'class' => array('orders'),
            'width' => '100%'
        );
        $html = theme('table', array(
            'header' => $header,
            'rows' => $rows,
            'attributes' => $attributes
        ));

        return $html;
    } else {
        return t('No orders yet');
    }
}

function twocheckout_usertab($user) {
    $uid = $user->uid;
    $cash = db_select('user_wallets', 'w')
        ->fields('w', array('cash'))
        ->condition('uid', $uid)
        ->execute()
        ->fetchField();

    $args = array(
        'uid' => $uid,
        'cash' => $cash,
    );
    $form = drupal_get_form('twocheckout_user_wallet_form', $args);
    return drupal_render($form);
}

function twocheckout_user_wallet_form($form, $form_state, $args) {
    $form['uid'] = array(
        '#type' => 'hidden',
        '#default_value' => $args['uid'],
        '#required' => true
    );
    $form['cash'] = array(
        '#type' => 'textfield',
        '#title' => 'Cash',
        '#required' => true,
        '#default_value' => $args['cash']
    );

    $form['submit'] = array(
        '#type' => 'actions',
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Update'),
        ),
    );

    return $form;
}

function twocheckout_user_wallet_form_submit($form, $form_state) {
    $uid = $form_state['values']['uid'];
    $cash = $form_state['values']['cash'];
    db_update('user_wallets')
        ->fields(array('cash' => $cash))
        ->condition('uid', $uid)
        ->execute();
    drupal_set_message('Updated');
}

function twocheckout_user_orders($uid) {
    $res = db_select('orders', 'o')
        ->fields('o', array('id', 'qty', 'total', 'created', 'status'))
        ->condition('uid', $uid)
        ->execute();
    $rows = array();
    while($row = $res->fetchAssoc()) {

        $row['created'] = date('Y-m-d H:i', $row['created']);
        $rows[] = $row;

    }
    if(count($rows) > 0) {
        $header = array(
            t('ID'),
            t('Quantity'),
            t('Total'),
            t('Date'),
            t('Status')
        );
        $attributes = array(
            'class' => array('orders'),
            'width' => '100%'
        );
        $html = theme('table', array(
            'header' => $header,
            'rows' => $rows,
            'attributes' => $attributes
        ));

        return $html;
    } else {
        return t('No orders yet');
    }
}

function twocheckout_view_own_orders($uid) {
    return (($GLOBALS['user']->uid == $uid && user_is_logged_in()) || user_access('administer users'));
}

function twocheckout_order_load($id) {
    $res = db_select('orders', 'o')
        ->fields('o')
        ->condition('id', $id)
        ->execute();
    $order = $res->fetchObject();

    return $order;
}

function twocheckout_order_load_by_invoce($invoceId) {
    $res = db_select('orders', 'o')
        ->fields('o')
        ->condition('invoiceid', $invoceId)
        ->execute();
    $order = $res->fetchObject();

    return $order;
}

function twocheckout_orders_load_by_status($status) {
    $res = db_select('orders', 'o')
        ->fields('o')
        ->condition('status', $status)
        ->execute();
    $orders = $res->fetchAll();

    return $orders;
}

function twocheckout_get_money($account) {
    if(!$account) {
        global $user;
    } else {
        $user = $account;
    }

    $res = db_select('user_wallets', 'w')
        ->fields('w', array('cash'))
        ->condition('uid', $user->uid)
        ->execute();
    $cash = $res->fetchObject();
    return $cash->cash;
}

function twocheckout_view_own_checkoutfunds($uid) {
    return (($GLOBALS['user']->uid == $uid && user_is_logged_in() && in_array('pro', $GLOBALS['user']->roles)) || user_access('administer users'));
}

function twocheckout_user_checkoutfunds($uid) {
    $args = array(
        'uid' => $uid
    );
    $form = drupal_get_form('twocheckout_checkoutfunds_form', $args);
    $html = drupal_render($form);
    drupal_add_js(
        array('twocheckout' =>
            array(
                'currency' => variable_get('twocheckout_currency'),
            )
        ),
        array('type' => 'setting')
    );

    return $html;
}

function twocheckout_checkoutfunds_form($form, $form_state, $args) {
    $form['uid'] = array(
        '#type' => 'hidden',
        '#default_value' => $args['uid'],
        '#required' => true
    );
    $form['qty'] = array(
        '#type' => 'textfield',
        '#title' => t('Quantity'),
        '#required' => true,
        '#element_validate' => array('element_validate_integer_positive'),
        '#field_suffix' => '<span class="recounter-text">=</span><input type="text" disabled="disabled" id="qty-recounter" /><span class="recounter-text bux">$</span>'
    );

    $form['submit'] = array(
        '#type' => 'actions',
        'submit' => array(
            '#type' => 'submit',
            '#value' => t('Checkout'),
        ),
    );

    return $form;
}

function twocheckout_checkoutfunds_form_submit($form, &$form_state) {
    global $user;
    $values = $form_state['values'];

    if($user->uid != $values['uid']) {
        return form_set_error('uid', t('Invalid user'));
    }
    $amount = twocheckout_get_money($user);
    if($values['qty'] > $amount) {
        return form_set_error('qty', t('You have not enought funds to checkout'));
    }

    $link = url('user/'.$user->uid, array('absolute' => true));
    $message = '<strong><a href="'.$link.'" target="_blank">'.$user->name.'</a></strong> отправил запрос на вывод средств на сумму '.$values['qty'].' '.variable_get('twocheckout_currencyname', 'PCOINS');
    $params = array(
        'body' => $message,
        'subject' => 'Запрос на вывод средств'
    );
    $to = variable_get('twocheckout_outemail', 'pstemka@gmail.com');

    $res =  drupal_mail('twocheckout', 'checkoutfunds', $to, language_default(), $params);
    if($res['result']) {
        drupal_set_message(t('Request accepted'));
    }
}

function twocheckout_mail($key, &$message, $params) {
    switch($key) {
        case 'checkoutfunds':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];
            $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
            break;
    }
}

function twocheckout_user_insert(&$edit, $account, $category) {
    db_insert('user_wallets')
    ->fields(array(
        'uid' => $account->uid,
    ))
    ->execute();
}

function twocheckout_user_delete($account) {
    db_delete('user_wallets')
    ->condition('uid', $account->uid)
    ->execute();
}

function twocheckout_endpoint() {
    $data = drupal_get_query_parameters();

    $resultMessage['type'] = 'error';
    $resultMessage['text'] = t('Incorrect data sent');

    if(count($data) == 0 || (array_key_exists('cancel', $data) && $data['cancel'] == 'true')) {
        $paymentId = $data['paymentId'];
        $orderData = array(
            'resultcode' => 'Incorrect data or canceled by paypal',
            'status' => 'error'
        );
        twocheckout_order_update_by_invoice($paymentId, $orderData);
        $resultMessage['type'] = 'error';
        $resultMessage['text'] = t('Incorrect data sent');
    } elseif($data['success'] == 'true') {
        $paymentId = $data['paymentId'];
        $payerID = $data['PayerID'];
        $authToken = twocheckout_lists_session(AUTH_TOKEN);

        if(variable_get('twocheckout_sandbox')) {
            $url = "https://api.sandbox.paypal.com/v1/payments/payment/$paymentId/execute";
        } else {
            $url = "https://api.paypal.com/v1/payments/payment/$paymentId/execute";
        }

        $postData = array(
            'payer_id' => $payerID
        );
        $curl = curl_init();

        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER,true);
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postData));
        curl_setopt($curl, CURLOPT_HTTPHEADER, array(
                'Content-Type:application/json',
                'Authorization:'.$authToken
            )
        );
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        $out = curl_exec($curl);
        curl_close($curl);

        $response = json_decode($out);

        if($response == NULL) {
            twocheckout_order_update_by_invoice($paymentId, null, true);
            $resultMessage['type'] = 'error';
            $resultMessage['text'] = t('Incorrect data sent');
        } else {
            if(isset($response->message)) {
                $orderData = array(
                    'resultcode' => $response->message. ' debug id: '.$response->debug_id,
                    'status' => 'error'
                );
                twocheckout_order_update_by_invoice($paymentId, $orderData);
                $resultMessage['type'] = 'error';
                $resultMessage['text'] = 'Paypal: '.$response->message;
            } else {
                $orderData = array(
                    'status' => $response->state,
                );
                twocheckout_order_update_by_invoice($response->id, $orderData);
                $resultMessage['type'] = 'status';
                $resultMessage['text'] = t('Your order has been placed');
            }
        }
    }
    drupal_set_message($resultMessage['text'], $resultMessage['type']);
    drupal_goto('payment/buy');
}

function twocheckout_lists_session($key, $value = NULL) {
    static $storage;
    if ($value) {
        $storage[$key] = $value ;
        $_SESSION['lists'][$key] = $value ;
    }
    else if (empty($storage[$key]) && isset($_SESSION['lists'][$key])) {
        $storage[$key] = $_SESSION['lists'][$key];
    }
    return $storage[$key];
}

function twocheckout_order_update_by_invoice($invoceId, $data = array(), $delete = false) {
    if(!$delete) {
        $data['modified'] = REQUEST_TIME;
        db_update('orders')->fields($data)->condition('orders.invoiceid', $invoceId)->execute();
    } else {
        db_delete('orders')->condition('orders.invoiceid', $invoceId)->execute();
    }
}

function twocheckout_cron() {
    $orders = twocheckout_orders_load_by_status('approved');
    foreach($orders as $order) {
        $authToken = twocheckout_lists_session(CRON_AUTH_TOKEN);
        if (!$authToken) {
            $authToken = twocheckout_get_auth_token(true);
        }
        $paymentId = $order->invoiceid;
        if (variable_get('twocheckout_sandbox')) {
            $url = "https://api.sandbox.paypal.com/v1/payments/payment/$paymentId";
        } else {
            $url = "https://api.paypal.com/v1/payments/payment/$paymentId";
        }

        $curl = curl_init();

        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HTTPHEADER, array(
                'Content-Type:application/json',
                'Authorization:' . $authToken
            )
        );
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        $out = curl_exec($curl);
        curl_close($curl);

        $response = json_decode($out);
        if ($response == NULL) {
            watchdog('payment state', 'Unable to create request for transaction ' . $paymentId);
        } else {
            if (isset($response->message)) {
                $orderData = array(
                    'resultcode' => $response->message . ' debug id: ' . $response->debug_id,
                    'status' => 'error'
                );
                twocheckout_order_update_by_invoice($paymentId, $orderData);
                watchdog('payment state', $response->name . ' ' . $response->message . ' debug id: ' . $response->debug_id . ' transaction ' . $paymentId);
            } else {
                $state = $response->transactions[0]->related_resources[0]->sale->state;
                $orderData['status'] = $state;
                if ($state == STATE_COMPLETE) {
                    $orderData['transfered'] = 1;
                    twocheckout_update_wallet_amount($order->uid, $order->qty);
                    $mess = t('@qty PCOINS transfered base on order №@oid transaction №@trans', array('@qty' => $order->qty, '@oid' => $order->id, '@trans' => $paymentId));
                    watchdog('PCOINS transfered', $mess);
                }

                twocheckout_order_update($order->id, $orderData);

                if ($order->status != $state) {
                    $mess = t('Order №@oid old status: @ostate, new status: @nstate', array('@oid' => $order->id, '@ostate' => $order->status, '@nstate' => $state));
                    watchdog('order status changed', $mess);
                }
            }
        }
    }
}

function twocheckout_get_auth_token($cron = false) {
    $authToken = null;
    if($cron) {
        $authToken = twocheckout_lists_session(CRON_AUTH_TOKEN);
    } else {
        $authToken = twocheckout_lists_session(AUTH_TOKEN);
    }
    if(!$authToken) {
        if(variable_get('twocheckout_sandbox')) {
            $url = "https://api.sandbox.paypal.com/v1/oauth2/token";
        } else {
            $url = "https://api.paypal.com/v1/oauth2/token";
        }
        $sellerId = variable_get('twocheckout_sellerid');
        $privateKey = variable_get('twocheckout_privatekey');
        $usrpwd = "$sellerId:$privateKey";
        $curl = curl_init();

        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER,true);
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_POSTFIELDS, "grant_type=client_credentials");
        curl_setopt($curl, CURLOPT_HTTPHEADER, array(
                'Accept: application/json'
            )
        );
        curl_setopt($curl, CURLOPT_USERPWD, $usrpwd);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
        $out = curl_exec($curl);
        curl_close($curl);

        $response = json_decode($out);
        if($response != NULL) {
            $tokenType = $response->token_type;
            $token = $response->access_token;
            $authToken = $tokenType.' '.$token;
            if($cron) {
                twocheckout_lists_session(CRON_AUTH_TOKEN, $authToken);
            } else {
                twocheckout_lists_session(AUTH_TOKEN, $authToken);
            }
        }
    }

    return $authToken;
}